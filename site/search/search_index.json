{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tp Arbres binaires","text":""},{"location":"#etat-du-tp","title":"\u00c9tat du TP","text":"<p>D\u00e9crivez ici l'\u00e9tat d'avancement du TP.</p>"},{"location":"#reponses-aux-questions","title":"R\u00e9ponses aux questions","text":"<p>Indiquez ici les r\u00e9ponses aux questions pos\u00e9es dans le TP. Vous reprendrez le num\u00e9ro de la section et le num\u00e9ro de la question. Par exemple pour r\u00e9pondre \u00e0 la question 3 de la section 2.4 vous indiquerez :</p>"},{"location":"#verification-des-arbres-produits","title":"V\u00e9rification des arbres produits","text":"<p>Apr\u00e8s avoir compiler et executer le fichier <code>example1_tree.c</code> avec les commandes suivantes:</p> <pre><code>make example1_tree # Compile le programme\n./example1_tree # Execute le programme (en cr\u00e9ant un fichier example1.gv)\nmake example1.pdf # Produit example1.pdf si example1.gv existe et que le programme dot est install\u00e9\n</code></pre> <p>La visualisation de l'arbre est comme suit:</p> <p></p>"},{"location":"#arbres-binaires","title":"Arbres binaires","text":""},{"location":"#creation-darbres","title":"Cr\u00e9ation d'arbres","text":""},{"location":"#q1","title":"Q1:","text":"<p>Apr\u00e8s avoir impl\u00e9menter les fonctions tree1<code>,</code>tree2<code>et</code>tree3` qui permettent de cr\u00e9er trois arbres diff\u00e9rents:</p> <p>En compilant avec la commande suivante:</p> <pre><code>make\n</code></pre> <p>Et \u00e9xecutant la commande suivante qui permet de creer les fichiers <code>.gv</code>:</p> <pre><code>./Test_tree\n</code></pre> <p>Et en \u00e9xecutant les commandes suivantes qui permettent de produit des fichiers <code>treeX.pdf</code> si <code>treeX.gv</code> existe et que le programme dot est install\u00e9:</p> <pre><code>make tree1.pdf\nmake tree2.pdf\nmake tree3.pdf\n</code></pre> <p>Apr\u00e8s avoir suivie tout ce processus, j'ai r\u00e9ussi \u00e0 obtenir le r\u00e9sultat suivant:</p> <p></p> <p></p> <p></p>"},{"location":"#impression","title":"Impression","text":""},{"location":"#q1_1","title":"Q1:","text":"<p>Apr\u00e8s avoir impl\u00e9menter et tester la fonction <code>print_tree</code>, j'ai eu comme r\u00e9sultat:</p> <pre><code>9 12 8 \nSize     = -1\nHeight    = -1\nnbLeaves = -1\n9 7 5 12 \nSize     = -1\nHeight    = -1\nnbLeaves = -1\n1 9 5 12 8 7 4 6 \nSize     = -1\nHeight    = -1\nnbLeaves = -1\n</code></pre> <p>NB: -1 est \u00e0 cause su fait que la fonction <code>size</code>, <code>Height</code> et <code>nbLeaves</code> n'ont pas encore \u00e9t\u00e9 impl\u00e9ment\u00e9</p>"},{"location":"#decomptes-sur-les-arbres","title":"D\u00e9comptes sur les arbres","text":""},{"location":"#q1-q2-q3","title":"Q1 / Q2 / Q3 :","text":"<p>Apr\u00e8s avoir impl\u00e9menter les trois fonction <code>nbLeaves</code>, <code>size</code>, <code>height</code> j'ai eu le r\u00e9sultat suivant pour les trois arbres construit pr\u00e9cedement:</p> <pre><code>9 12 8 \nSize     = 3\nHeight    = 1\nnbLeaves = 2\n9 7 5 12 \nSize     = 4\nHeight    = 3\nnbLeaves = 1\n1 9 5 12 8 7 4 6 \nSize     = 8\nHeight    = 3\nnbLeaves = 4\n</code></pre>"},{"location":"#q5","title":"Q5:","text":"<p>Apr\u00e8s avoir impl\u00e9menter et tester la fonction <code>nbTrees</code>, j'ai eu comme r\u00e9sultat:</p> <pre><code>Number of binary trees with 0 nodes is 1\nNumber of binary trees with 1 nodes is 1\nNumber of binary trees with 2 nodes is 2\nNumber of binary trees with 3 nodes is 5\nNumber of binary trees with 4 nodes is 14\nNumber of binary trees with 5 nodes is 42\nNumber of binary trees with 6 nodes is 132\nNumber of binary trees with 7 nodes is 429\nNumber of binary trees with 8 nodes is 1430\nNumber of binary trees with 9 nodes is 4862\nNumber of binary trees with 10 nodes is 16796\nNumber of binary trees with 11 nodes is 58786\nNumber of binary trees with 12 nodes is 208012\nNumber of binary trees with 13 nodes is 742900\nNumber of binary trees with 14 nodes is 2674440\nNumber of binary trees with 15 nodes is 9694845\nNumber of binary trees with 16 nodes is 35357670\nNumber of binary trees with 17 nodes is 129644790\nNumber of binary trees with 18 nodes is 477638700\nNumber of binary trees with 19 nodes is 1767263190\n</code></pre> <p>On constate lors du calcul des derni\u00e8res valeurs que le programme prend plus de temps pour \u00e9xecuter ces derni\u00e8res valeurs \u00e0 cause du fait que le nombre d'arbres devient tr\u00e8s grand pour les valeurs de noeud 18 et 19.</p> <p>Pour bien analyse complexit\u00e9 d'\u00e9xecution, j'ai mis en place une fonctionnalit\u00e9 qui utilise la librairie <code>&lt;time.h&gt;</code>, et qui premet d'enregistrer le temps du d\u00e9but d'\u00e9xecution du calcule des valeurs de Cn ainsi que le temps de fin et fait une difference entre la fin et le d\u00e9but ce qui nous permet de mesurer la dur\u00e9e d'\u00e9xecution du programme.</p> <pre><code>struct timespec debut, fin;\ndouble temps_execution;\n\nclock_gettime(CLOCK_MONOTONIC, &amp;debut);\nfor (i = 0; i &lt;= 19; i++) {\n    printf(\"Number of binary trees with %d nodes is %d\\n\",i,(nbTrees(i)));\n}\nclock_gettime(CLOCK_MONOTONIC, &amp;fin);\ntemps_execution = (fin.tv_sec - debut.tv_sec) + (fin.tv_nsec - debut.tv_nsec) / 1e9;\nprintf(\"Temps d'ex\u00e9cution : %.9f secondes\\n\", temps_execution);\n</code></pre> <p>Le r\u00e9sultat de cette mesure de temps est <code>Temps d'ex\u00e9cution : 3.643728000 secondes</code>.</p>"},{"location":"#q7","title":"Q7:","text":"<p>Apr\u00e8s avoir impl\u00e9menter cette deuxi\u00e8me versions plus efficace, je constate une grande difference en terme de complexit\u00e9 temporelle, ainsi que le r\u00e9sultat de cette mesure de temps est <code>Temps d'ex\u00e9cution : 0.000058000 secondes</code>, ce qui repr\u00e9sente une tr\u00e8s grosse difference entre les deux m\u00e9thodes d'impl\u00e9mentation.</p>"},{"location":"#arbres-binaires-de-recherche","title":"Arbres binaires de recherche","text":""},{"location":"#q1_2","title":"Q1:","text":"<p>Apr\u00e8s avoir d\u00e9fini l'arbre binaire de recherche \u00e0 partir de l'algrithme d'insertion vu en cours, j'ai obtenu le resultat suivant:</p> <p></p>"},{"location":"#q3","title":"Q3:","text":"<p>Pour s'assurer simplement que les arbres construits sont bien des arbres binaires de recherche, il faudra verifier que toutes les valeurs du sous-arbre gauche doivent \u00eatre inf\u00e9rieures ou \u00e9galeS \u00e0 la valeur du n\u0153ud et que toutes les valeurs du sous-arbre droit doivent \u00eatre strictement sup\u00e9rieures \u00e0 la valeur du n\u0153ud.</p>"},{"location":"#q5_1","title":"Q5:","text":"<p>Apr\u00e8s avoir impl\u00e9menter la fonction add qui ajoute une valeur \u00e0 un arbre binaire de recherche ainsi que les fonctions bst2 et bst3 permettant la cr\u00e9ation des arbres binaires de recherche suivants en utilisant la fonction add dans lesquels les valeurs sont ins\u00e9r\u00e9es successivement en suivant l'ordre donn\u00e9 :</p> <ul> <li>arbre 2 : 5, 4, 2, 7, 6, 1</li> </ul> <p></p> <ul> <li>arbre 3 : 7, 1, 4, 5, 6, 2</li> </ul> <p></p>"},{"location":"#q7_1","title":"Q7:","text":"<p>Pour les 3 arbres, la recherche de la valeur 0 , s'effectue en 6 comparaisons parce que 0 n'est present dans aucun des 3 arbres donc ce qui fait qu'on est oblig\u00e9 de passer sur tout les noeuds de  l'arbre , vu que les 3 arbres sont de tailles 6 donc on effectue 6 compraisons.</p>"},{"location":"#q8","title":"Q8:","text":"<p>La valeur <code>minimal</code> de l'arbre binaire de recherche est la premiere feuille \u00e0 gauche.</p> <p>La valeur <code>maximal</code> de l'arbre binaire de recherche est la premiere feuille \u00e0 droite.</p>"},{"location":"#lentier-mysterieux","title":"L'entier myst\u00e9rieux","text":"<p>Apr\u00e8s avoir impl\u00e9menter la proc\u00e9dure de jeu <code>play</code>, qui permet de faire jouer l'ordinateur \u00e0 l'entier myst\u00e9rieux en utilisant un ABR avec une option d'int\u00e9raction avec le joueur via le terminale.</p> <p>En compilant et \u00e9xecutant le programme avec les commandes suivantes.</p> <pre><code>make  # Compile le programme\n./Test_tree # Execute le programme\n</code></pre> <p>J'ai obtenu comme r\u00e9sultat:</p> <pre><code>Mysterious tree between 12 and 24:\n12 13 14 15 16 17 18 19 20 21 22 23 24 \nchoisir un nombre entre 12 et 24 ? :\n20\n\n Est-ce 18 ? \n\n Trop petit \n\n Est-ce 21 \n\n Trop grand \n\n Est-ce 19 \n\n Trop petit \n\n Est-ce 20 \n\n C'est gagn\u00e9 !\n</code></pre>"}]}